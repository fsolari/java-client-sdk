/*
 * MercadoLibre API
 * MercadoLibre API Documentation.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.Configuration;
import io.swagger.client.model.*;
import org.junit.Ignore;
import org.junit.Test;

import java.math.BigDecimal;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    private final Long clientId = 8636606929674838L;
    private final String clientSecret = "";
    private final DefaultApi api = new DefaultApi();
    private final String accessToken = "";


    /**
     * Returns response from any specified resource.
     *
     * @throws ApiException if the Api call fails
     */
   @Test
    public void getAuthUrlTest() throws ApiException {
        String redirectUri = "https://fsolariherokutest.herokuapp.com";
        String response = api.getAuthUrl(redirectUri, Configuration.AuthUrls.MLA);
        System.out.println(response);

    }


    /**
     * Returns response from any specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultGetTest() throws ApiException {
        String resource = "currencies";
        Object response = api.defaultGet(resource);
        System.out.println(response);
        // TODO: test validations
    }

    /**
     * Make a POST to any resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultPostTest() throws ApiException {
        String resource = "items";
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        Object response = api.defaultPost(accessToken, resource, body);
        System.out.println(response);
        // TODO: test validations
    }

    /**
     * Update an object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultPutTest() throws ApiException {
        String id = "";
        String resource = "items";
        ItemJson body = new ItemJson();
        body.price(100);
        Object response = api.defaultPut(resource, id, accessToken, body);
        System.out.println(response);
        // TODO: test validations
    }

    /**
     * Delete an object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultDeleteTest() throws ApiException {
        String id = "";
        String resource = "currencies";
        Object response = api.defaultDelete(resource, id, accessToken);
        System.out.println(response);
        // TODO: test validations
    }

    /**
     * Returns information about a category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesCategoryIdGetTest() throws ApiException {
        String categoryId = null;
        CategoryResponse response = api.categoriesCategoryIdGet(categoryId);

        // TODO: test validations
    }

    /**
     * Return item infromation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsItemIdGetTest() throws ApiException {
        String itemId = null;
        String accessToken = null;
        ItemResponse response = api.itemsItemIdGet(itemId, accessToken);

        // TODO: test validations
    }

    /**
     * Update an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsItemIdPutTest() throws ApiException {
        String itemId = null;
        String accessToken = null;
        Object body = null;
        ItemResponse response = api.itemsItemIdPut(itemId, accessToken, body);

        // TODO: test validations
    }

    /**
     * List an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsPostTest() throws ApiException {
        String accessToken = null;
        ItemJson body = null;
        ItemResponse response = api.itemsPost(accessToken, body);

        // TODO: test validations
    }

    /**
     * Validate the JSON before listing an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsValidatePostTest() throws ApiException {
        String accessToken = null;
        ItemJson body = null;
        Object response = api.itemsValidatePost(accessToken, body);

        // TODO: test validations
    }

    /**
     * Get a message by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesMessageIdGetTest() throws ApiException {
        String accessToken = null;
        String messageId = null;
        Message response = api.messagesMessageIdGet(accessToken, messageId);

        // TODO: test validations
    }

    /**
     * Return all messages from a order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesOrdersOrderIdGetTest() throws ApiException {
        String accessToken = null;
        Integer orderId = null;
        MessageSearchResults response = api.messagesOrdersOrderIdGet(accessToken, orderId);

        // TODO: test validations
    }

    /**
     * Send a message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesPostTest() throws ApiException {
        String accessToken = null;
        MessageJSON body = null;
        MessageCreated response = api.messagesPost(accessToken, body);

        // TODO: test validations
    }

    /**
     * Get an order by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersOrderIdGetTest() throws ApiException {
        String accessToken = null;
        Integer orderId = null;
        Object response = api.ordersOrderIdGet(accessToken, orderId);

        // TODO: test validations
    }

    /**
     * Search orders by seller or buyer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersSearchGetTest() throws ApiException {
        String accessToken = null;
        Integer buyer = null;
        Integer seller = null;
        Integer offset = null;
        Integer limit = null;
        Object response = api.ordersSearchGet(accessToken, buyer, seller, offset, limit);

        // TODO: test validations
    }

    /**
     * Retrieves all data to make a delivery.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipmentsShipmentIdGetTest() throws ApiException {
        String accessToken = null;
        BigDecimal shipmentId = null;
        Shipment response = api.shipmentsShipmentIdGet(accessToken, shipmentId);

        // TODO: test validations
    }

    /**
     * Return all sites where MercadoLibre operates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetTest() throws ApiException {
        Sites response = api.sitesGet();

        // TODO: test validations
    }

    /**
     * Predict category by title.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSiteIdCategoryPredictorPredictGetTest() throws ApiException {
        String siteId = null;
        String title = null;
        CategoryPrediction response = api.sitesSiteIdCategoryPredictorPredictGet(siteId, title);

        // TODO: test validations
    }

    /**
     * Return information about a site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSiteIdGetTest() throws ApiException {
        String siteId = null;
        Site response = api.sitesSiteIdGet(siteId);

        // TODO: test validations
    }

    /**
     * Return account information about the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersMeGetTest() throws ApiException {
        String accessToken = null;
        UserResponse response = api.usersMeGet(accessToken);

        // TODO: test validations
    }

    /**
     * Return user account information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        Integer userId = null;
        String accessToken = null;
        UserResponse response = api.usersUserIdGet(userId, accessToken);

        // TODO: test validations
    }

}
