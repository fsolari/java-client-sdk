/*
 * MercadoLibre API
 * MercadoLibre API Documentation.
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.Configuration;
import io.swagger.client.model.*;
import org.junit.Ignore;
import org.junit.Test;

import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import static org.junit.Assert.*;

/**
 * API tests for DefaultApi
 */
@Ignore
public class DefaultApiTest {

    /**
     * To run tests replace all the corresponding null values for valid values
     **/

    private final Long clientId = null;
    private final String clientSecret = null;
    private final String redirectUri = null;
    private final String code = null;
    private final String accessToken = null;
    private final DefaultApi api = new DefaultApi();


    /**
     * Returns response from any specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAuthUrlTest() throws ApiException, UnsupportedEncodingException {
        DefaultApi api = new DefaultApi(clientId, clientSecret);
        String response = api.getAuthUrl(redirectUri, Configuration.AuthUrls.MLA);
        StringBuilder sb = new StringBuilder();
        sb.append(Configuration.AuthUrls.MLA.getValue());
        sb.append("/authorization?response_type=code&client_id=");
        sb.append(clientId);
        sb.append("&redirect_uri=");
        try {
            sb.append(URLEncoder.encode(redirectUri, "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            sb.append(redirectUri);
        }
        assertNotNull(response);
        assertEquals(sb.toString(), response);
    }

    /**
     * Returns response from any specified resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultGetTest() throws ApiException {
        String resource = "currencies";
        Object response = api.defaultGet(resource);
        assertNotNull(response);
        System.out.println(response);
    }

    /**
     * Make a POST to any resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultPostTest() throws ApiException {
        String resource = "items";
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        Object response = api.defaultPost(accessToken, resource, body);
        assertNotNull(response);
        System.out.println(response);
    }

    /**
     * Update an object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultPutTest() throws ApiException {
        String id = null;
        String resource = "items";
        ItemJson body = new ItemJson();
        body.price(100);
        Object response = api.defaultPut(resource, id, accessToken, body);
        assertNotNull(response);
    }

    /**
     * Delete an object.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultDeleteTest() throws ApiException {
        String id = null;
        String resource = null;
        Object response = api.defaultDelete(resource, id, accessToken);
        assertNotNull(response);
    }

    /**
     * Returns information about a category.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categoriesCategoryIdGetTest() throws ApiException {
        String categoryId = "MLA3530";
        CategoryResponse response = api.categoriesCategoryIdGet(categoryId);
        assertNotNull(response);
        assertEquals(categoryId, response.getId());
    }

    /**
     * Return item infromation.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsItemIdGetTest() throws ApiException {
        String itemId = "MLA652266260";
        ItemResponse response = api.itemsItemIdGet(itemId, accessToken);
        assertNotNull(response);
        assertEquals(itemId, response.getId());
    }

    /**
     * Update an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsItemIdPutTest() throws ApiException {
        String itemId = null;
        ItemJson body = new ItemJson();
        body.price(100);
        ItemResponse response = api.itemsItemIdPut(itemId, accessToken, body);
        System.out.println(response);
    }

    /**
     * List an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsPostTest() throws ApiException {
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        ItemResponse response = api.itemsPost(accessToken, body);
        assertNotNull(response);
        assertEquals(body.getTitle().toLowerCase(), (response.getTitle().toLowerCase()));
        assertEquals(body.getSiteId(), response.getSiteId());
        assertEquals(body.getPrice(), response.getPrice());
        assertEquals(body.getCategoryId(), response.getCategoryId());
    }

    /**
     * Validate the JSON before listing an item.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void itemsValidatePostTest() throws ApiException {
        ItemJson body = new ItemJson();
        body.title("TEST TITLE");
        body.listingTypeId("gold_special");
        body.price(10);
        body.categoryId("MLA3530");
        body.buyingMode("buy_it_now");
        body.currencyId("ARS");
        body.condition("new");
        body.availableQuantity(2);
        body.siteId("MLA");
        Object response = api.itemsValidatePost(accessToken, body);
        System.out.println(response);
    }

    /**
     * Get a message by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesMessageIdGetTest() throws ApiException {
        String messageId = null;
        Message response = api.messagesMessageIdGet(accessToken, messageId);
        assertNotNull(response);
        assertEquals(messageId, response.getMessageId());
    }

    /**
     * Return all messages from a order.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesOrdersOrderIdGetTest() throws ApiException {
        Integer orderId = null;
        MessageSearchResults response = api.messagesOrdersOrderIdGet(accessToken, orderId);
        assertNotNull(response);
        assertNotNull(response.getResults());
        assertTrue("Total must be >= 0", response.getPaging().getTotal() >= 0);
        System.out.println(response);
    }

    /**
     * Send a message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void messagesPostTest() throws ApiException {
        MessageJSON body = new MessageJSON();

        From sender = new From();
        sender.userId(null);

        List<To> receivers = new ArrayList<>();

        To receiver = new To();
        receiver.userId(null);
        receiver.siteId("MLA");
        receiver.resource("orders");
        receiver.resourceId(null);

        receivers.add(0, receiver);

        Text text = new Text();
        text.plain("TEST MESSAGE");

        body.from(sender);
        body.to(receivers);
        body.text(text);
        MessageCreated response = api.messagesPost(accessToken, body);

        assertNotNull(response);
        assertEquals(body.getFrom().getUserId(), response.get(0).getFrom().getUserId());
        assertEquals(body.getTo(), response.get(0).getTo());
        assertEquals(body.getText().getPlain(), response.get(0).getText().getPlain());
    }


    /**
     * Get an order by ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersOrderIdGetTest() throws ApiException {
        Integer orderId = null;
        Object response = api.ordersOrderIdGet(accessToken, orderId);
        assertNotNull(response);
        System.out.println(response);
    }

    /**
     * Search orders by seller or buyer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ordersSearchGetTest() throws ApiException {
        Integer buyer = null;
        Integer seller = null;
        Integer offset = null;
        Integer limit = null;
        Object response = api.ordersSearchGet(accessToken, buyer, seller, offset, limit);
        assertNotNull(response);
        System.out.println(response);
    }

    /**
     * Retrieves all data to make a delivery.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shipmentsShipmentIdGetTest() throws ApiException {
        Long shipmentId = null;
        Shipment response = api.shipmentsShipmentIdGet(accessToken, shipmentId);
        assertNotNull(response);
        assertEquals(shipmentId, response.getId());
    }

    /**
     * Return all sites where MercadoLibre operates.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesGetTest() throws ApiException {
        Sites response = api.sitesGet();
        assertNotNull(response);
        System.out.println(response);
    }

    /**
     * Predict category by title.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSiteIdCategoryPredictorPredictGetTest() throws ApiException {
        String siteId = "MLA";
        String title = "Ipod Touch 6";
        CategoryPrediction response = api.sitesSiteIdCategoryPredictorPredictGet(siteId, title);
        assertNotNull(response);
    }

    /**
     * Return information about a site.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sitesSiteIdGetTest() throws ApiException {
        String siteId = "MLA";
        Site response = api.sitesSiteIdGet(siteId);
        assertNotNull(response);
        assertEquals(siteId, response.getId());
    }

    /**
     * Return account information about the authenticated user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersMeGetTest() throws ApiException {
        Integer userId = null;
        UserResponse response = api.usersMeGet(accessToken);
        assertNotNull(response);
        assertEquals(userId, response.getId());
    }

    /**
     * Return user account information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usersUserIdGetTest() throws ApiException {
        Integer userId = null;
        UserResponse response = api.usersUserIdGet(userId, accessToken);
        assertNotNull(response);
        assertEquals(userId, response.getId());
    }

}
